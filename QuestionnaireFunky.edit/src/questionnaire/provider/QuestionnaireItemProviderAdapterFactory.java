/**
 */
package questionnaire.provider;

import java.util.ArrayList;
import java.util.Collection;

import org.eclipse.emf.common.notify.Adapter;
import org.eclipse.emf.common.notify.Notification;
import org.eclipse.emf.common.notify.Notifier;

import org.eclipse.emf.edit.provider.ChangeNotifier;
import org.eclipse.emf.edit.provider.ComposeableAdapterFactory;
import org.eclipse.emf.edit.provider.ComposedAdapterFactory;
import org.eclipse.emf.edit.provider.IChangeNotifier;
import org.eclipse.emf.edit.provider.IDisposable;
import org.eclipse.emf.edit.provider.IEditingDomainItemProvider;
import org.eclipse.emf.edit.provider.IItemLabelProvider;
import org.eclipse.emf.edit.provider.IItemPropertySource;
import org.eclipse.emf.edit.provider.INotifyChangedListener;
import org.eclipse.emf.edit.provider.IStructuredItemContentProvider;
import org.eclipse.emf.edit.provider.ITreeItemContentProvider;

import questionnaire.util.QuestionnaireAdapterFactory;

/**
 * This is the factory that is used to provide the interfaces needed to support Viewers.
 * The adapters generated by this factory convert EMF adapter notifications into calls to {@link #fireNotifyChanged fireNotifyChanged}.
 * The adapters also support Eclipse property sheets.
 * Note that most of the adapters are shared among multiple instances.
 * <!-- begin-user-doc -->
 * <!-- end-user-doc -->
 * @generated
 */
public class QuestionnaireItemProviderAdapterFactory extends QuestionnaireAdapterFactory implements ComposeableAdapterFactory, IChangeNotifier, IDisposable {
	/**
	 * This keeps track of the root adapter factory that delegates to this adapter factory.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected ComposedAdapterFactory parentAdapterFactory;

	/**
	 * This is used to implement {@link org.eclipse.emf.edit.provider.IChangeNotifier}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected IChangeNotifier changeNotifier = new ChangeNotifier();

	/**
	 * This keeps track of all the supported types checked by {@link #isFactoryForType isFactoryForType}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected Collection<Object> supportedTypes = new ArrayList<Object>();

	/**
	 * This constructs an instance.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public QuestionnaireItemProviderAdapterFactory() {
		supportedTypes.add(IEditingDomainItemProvider.class);
		supportedTypes.add(IStructuredItemContentProvider.class);
		supportedTypes.add(ITreeItemContentProvider.class);
		supportedTypes.add(IItemLabelProvider.class);
		supportedTypes.add(IItemPropertySource.class);
	}

	/**
	 * This keeps track of the one adapter used for all {@link questionnaire.Questionnaire} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected QuestionnaireItemProvider questionnaireItemProvider;

	/**
	 * This creates an adapter for a {@link questionnaire.Questionnaire}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createQuestionnaireAdapter() {
		if (questionnaireItemProvider == null) {
			questionnaireItemProvider = new QuestionnaireItemProvider(this);
		}

		return questionnaireItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link questionnaire.Debut} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected DebutItemProvider debutItemProvider;

	/**
	 * This creates an adapter for a {@link questionnaire.Debut}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createDebutAdapter() {
		if (debutItemProvider == null) {
			debutItemProvider = new DebutItemProvider(this);
		}

		return debutItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link questionnaire.Fin} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected FinItemProvider finItemProvider;

	/**
	 * This creates an adapter for a {@link questionnaire.Fin}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createFinAdapter() {
		if (finItemProvider == null) {
			finItemProvider = new FinItemProvider(this);
		}

		return finItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link questionnaire.Texte} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected TexteItemProvider texteItemProvider;

	/**
	 * This creates an adapter for a {@link questionnaire.Texte}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createTexteAdapter() {
		if (texteItemProvider == null) {
			texteItemProvider = new TexteItemProvider(this);
		}

		return texteItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link questionnaire.QuestionOuverte} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected QuestionOuverteItemProvider questionOuverteItemProvider;

	/**
	 * This creates an adapter for a {@link questionnaire.QuestionOuverte}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createQuestionOuverteAdapter() {
		if (questionOuverteItemProvider == null) {
			questionOuverteItemProvider = new QuestionOuverteItemProvider(this);
		}

		return questionOuverteItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link questionnaire.QuestionOuiNon} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected QuestionOuiNonItemProvider questionOuiNonItemProvider;

	/**
	 * This creates an adapter for a {@link questionnaire.QuestionOuiNon}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createQuestionOuiNonAdapter() {
		if (questionOuiNonItemProvider == null) {
			questionOuiNonItemProvider = new QuestionOuiNonItemProvider(this);
		}

		return questionOuiNonItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link questionnaire.QuestionReponseMultiple} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected QuestionReponseMultipleItemProvider questionReponseMultipleItemProvider;

	/**
	 * This creates an adapter for a {@link questionnaire.QuestionReponseMultiple}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createQuestionReponseMultipleAdapter() {
		if (questionReponseMultipleItemProvider == null) {
			questionReponseMultipleItemProvider = new QuestionReponseMultipleItemProvider(this);
		}

		return questionReponseMultipleItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link questionnaire.Aiguilleur} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected AiguilleurItemProvider aiguilleurItemProvider;

	/**
	 * This creates an adapter for a {@link questionnaire.Aiguilleur}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createAiguilleurAdapter() {
		if (aiguilleurItemProvider == null) {
			aiguilleurItemProvider = new AiguilleurItemProvider(this);
		}

		return aiguilleurItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link questionnaire.TestEntre} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected TestEntreItemProvider testEntreItemProvider;

	/**
	 * This creates an adapter for a {@link questionnaire.TestEntre}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createTestEntreAdapter() {
		if (testEntreItemProvider == null) {
			testEntreItemProvider = new TestEntreItemProvider(this);
		}

		return testEntreItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link questionnaire.TestInferieur} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected TestInferieurItemProvider testInferieurItemProvider;

	/**
	 * This creates an adapter for a {@link questionnaire.TestInferieur}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createTestInferieurAdapter() {
		if (testInferieurItemProvider == null) {
			testInferieurItemProvider = new TestInferieurItemProvider(this);
		}

		return testInferieurItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link questionnaire.TestSuperieur} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected TestSuperieurItemProvider testSuperieurItemProvider;

	/**
	 * This creates an adapter for a {@link questionnaire.TestSuperieur}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createTestSuperieurAdapter() {
		if (testSuperieurItemProvider == null) {
			testSuperieurItemProvider = new TestSuperieurItemProvider(this);
		}

		return testSuperieurItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link questionnaire.TestEgalite} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected TestEgaliteItemProvider testEgaliteItemProvider;

	/**
	 * This creates an adapter for a {@link questionnaire.TestEgalite}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createTestEgaliteAdapter() {
		if (testEgaliteItemProvider == null) {
			testEgaliteItemProvider = new TestEgaliteItemProvider(this);
		}

		return testEgaliteItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link questionnaire.TypeSaisieNumerique} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected TypeSaisieNumeriqueItemProvider typeSaisieNumeriqueItemProvider;

	/**
	 * This creates an adapter for a {@link questionnaire.TypeSaisieNumerique}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createTypeSaisieNumeriqueAdapter() {
		if (typeSaisieNumeriqueItemProvider == null) {
			typeSaisieNumeriqueItemProvider = new TypeSaisieNumeriqueItemProvider(this);
		}

		return typeSaisieNumeriqueItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link questionnaire.TypeSaisieAlphaNumerique} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected TypeSaisieAlphaNumeriqueItemProvider typeSaisieAlphaNumeriqueItemProvider;

	/**
	 * This creates an adapter for a {@link questionnaire.TypeSaisieAlphaNumerique}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createTypeSaisieAlphaNumeriqueAdapter() {
		if (typeSaisieAlphaNumeriqueItemProvider == null) {
			typeSaisieAlphaNumeriqueItemProvider = new TypeSaisieAlphaNumeriqueItemProvider(this);
		}

		return typeSaisieAlphaNumeriqueItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link questionnaire.TypeSaisieAlpha} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected TypeSaisieAlphaItemProvider typeSaisieAlphaItemProvider;

	/**
	 * This creates an adapter for a {@link questionnaire.TypeSaisieAlpha}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createTypeSaisieAlphaAdapter() {
		if (typeSaisieAlphaItemProvider == null) {
			typeSaisieAlphaItemProvider = new TypeSaisieAlphaItemProvider(this);
		}

		return typeSaisieAlphaItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link questionnaire.TypeSaisieAll} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected TypeSaisieAllItemProvider typeSaisieAllItemProvider;

	/**
	 * This creates an adapter for a {@link questionnaire.TypeSaisieAll}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createTypeSaisieAllAdapter() {
		if (typeSaisieAllItemProvider == null) {
			typeSaisieAllItemProvider = new TypeSaisieAllItemProvider(this);
		}

		return typeSaisieAllItemProvider;
	}

	/**
	 * This returns the root adapter factory that contains this factory.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public ComposeableAdapterFactory getRootAdapterFactory() {
		return parentAdapterFactory == null ? this : parentAdapterFactory.getRootAdapterFactory();
	}

	/**
	 * This sets the composed adapter factory that contains this factory.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public void setParentAdapterFactory(ComposedAdapterFactory parentAdapterFactory) {
		this.parentAdapterFactory = parentAdapterFactory;
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public boolean isFactoryForType(Object type) {
		return supportedTypes.contains(type) || super.isFactoryForType(type);
	}

	/**
	 * This implementation substitutes the factory itself as the key for the adapter.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter adapt(Notifier notifier, Object type) {
		return super.adapt(notifier, this);
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Object adapt(Object object, Object type) {
		if (isFactoryForType(type)) {
			Object adapter = super.adapt(object, type);
			if (!(type instanceof Class<?>) || (((Class<?>)type).isInstance(adapter))) {
				return adapter;
			}
		}

		return null;
	}

	/**
	 * This adds a listener.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public void addListener(INotifyChangedListener notifyChangedListener) {
		changeNotifier.addListener(notifyChangedListener);
	}

	/**
	 * This removes a listener.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public void removeListener(INotifyChangedListener notifyChangedListener) {
		changeNotifier.removeListener(notifyChangedListener);
	}

	/**
	 * This delegates to {@link #changeNotifier} and to {@link #parentAdapterFactory}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public void fireNotifyChanged(Notification notification) {
		changeNotifier.fireNotifyChanged(notification);

		if (parentAdapterFactory != null) {
			parentAdapterFactory.fireNotifyChanged(notification);
		}
	}

	/**
	 * This disposes all of the item providers created by this factory. 
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public void dispose() {
		if (questionnaireItemProvider != null) questionnaireItemProvider.dispose();
		if (debutItemProvider != null) debutItemProvider.dispose();
		if (finItemProvider != null) finItemProvider.dispose();
		if (texteItemProvider != null) texteItemProvider.dispose();
		if (questionOuverteItemProvider != null) questionOuverteItemProvider.dispose();
		if (questionOuiNonItemProvider != null) questionOuiNonItemProvider.dispose();
		if (questionReponseMultipleItemProvider != null) questionReponseMultipleItemProvider.dispose();
		if (aiguilleurItemProvider != null) aiguilleurItemProvider.dispose();
		if (testEntreItemProvider != null) testEntreItemProvider.dispose();
		if (testInferieurItemProvider != null) testInferieurItemProvider.dispose();
		if (testSuperieurItemProvider != null) testSuperieurItemProvider.dispose();
		if (testEgaliteItemProvider != null) testEgaliteItemProvider.dispose();
		if (typeSaisieNumeriqueItemProvider != null) typeSaisieNumeriqueItemProvider.dispose();
		if (typeSaisieAlphaNumeriqueItemProvider != null) typeSaisieAlphaNumeriqueItemProvider.dispose();
		if (typeSaisieAlphaItemProvider != null) typeSaisieAlphaItemProvider.dispose();
		if (typeSaisieAllItemProvider != null) typeSaisieAllItemProvider.dispose();
	}

}
